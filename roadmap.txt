atbi_marketing_system/
â”‚
â”œâ”€â”€ app/                             # Main application package
â”‚   â”œâ”€â”€ __init__.py                   # Initialize Flask app, DB, register blueprints
â”‚   â”œâ”€â”€ config.py                     # Configuration settings (dev/prod, DB URI)
â”‚   â”œâ”€â”€ extensions.py                 # Extensions (SQLAlchemy, Migrate, etc.)
â”‚   â”‚
â”‚   â”œâ”€â”€ models/                       # Database models
â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”œâ”€â”€ incubate.py                # Incubate model
â”‚   â”‚   â”œâ”€â”€ product.py                 # Product model (availability, stock)
â”‚   â”‚   â”œâ”€â”€ reservation.py             # Reservation model
â”‚   â”‚   â”œâ”€â”€ sales.py                   # Sales record model
â”‚   â”‚   â””â”€â”€ notification.py            # Notification model
â”‚   â”‚
â”‚   â”œâ”€â”€ routes/                       # Flask blueprints (modular routes)
â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”œâ”€â”€ showroom.py                # Virtual showroom & product browsing
â”‚   â”‚   â”œâ”€â”€ reservation.py             # Reservation endpoints
â”‚   â”‚   â”œâ”€â”€ inventory.py               # Inventory management
â”‚   â”‚   â”œâ”€â”€ notification.py            # Product status notifications
â”‚   â”‚   â””â”€â”€ reports.py                 # Sales reports generation
â”‚   â”‚
â”‚   â”œâ”€â”€ services/                     # Business logic layer
â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”œâ”€â”€ inventory_service.py       # Stock monitoring & updates
â”‚   â”‚   â”œâ”€â”€ notification_service.py    # Sending product status notifications
â”‚   â”‚   â”œâ”€â”€ reservation_service.py     # Reservation handling logic
â”‚   â”‚   â””â”€â”€ report_service.py          # Report generation logic
â”‚   â”‚
â”‚   â”œâ”€â”€ templates/                    # Jinja2 HTML templates
â”‚   â”‚   â”œâ”€â”€ layouts/                   # Base layouts (header, footer)
â”‚   â”‚   â”‚   â””â”€â”€ base.html
â”‚   â”‚   â”œâ”€â”€ showroom/                  # Pages for product showroom
â”‚   â”‚   â”‚   â”œâ”€â”€ index.html
â”‚   â”‚   â”‚   â””â”€â”€ product_detail.html
â”‚   â”‚   â”œâ”€â”€ reservation/
â”‚   â”‚   â”‚   â”œâ”€â”€ form.html
â”‚   â”‚   â”‚   â””â”€â”€ confirmation.html
â”‚   â”‚   â”œâ”€â”€ inventory/
â”‚   â”‚   â”‚   â””â”€â”€ dashboard.html
â”‚   â”‚   â”œâ”€â”€ notification/
â”‚   â”‚   â”‚   â””â”€â”€ list.html
â”‚   â”‚   â””â”€â”€ reports/
â”‚   â”‚       â””â”€â”€ sales_report.html
â”‚   â”‚
â”‚   â”œâ”€â”€ static/                        # Static assets
â”‚   â”‚   â”œâ”€â”€ css/
â”‚   â”‚   â”‚   â””â”€â”€ styles.css
â”‚   â”‚   â”œâ”€â”€ js/
â”‚   â”‚   â”‚   â””â”€â”€ scripts.js
â”‚   â”‚   â””â”€â”€ images/
â”‚   â”‚       â””â”€â”€ logo.png
â”‚   â”‚
â”‚   â””â”€â”€ forms/                         # WTForms definitions
â”‚       â”œâ”€â”€ __init__.py
â”‚       â”œâ”€â”€ reservation_form.py
â”‚       â”œâ”€â”€ product_form.py
â”‚       â””â”€â”€ inventory_form.py
â”‚
â”œâ”€â”€ migrations/                        # Flask-Migrate scripts for PostgreSQL
â”‚
â”‚
â”œâ”€â”€ .env                               # Environment variables (DB URI, secrets)
â”œâ”€â”€ requirements.txt                   # Python dependencies
â”œâ”€â”€ run.py                             # Entry point to run Flask app
â””â”€â”€ README.md                          # Project documentation



D:\programs\Postgres18\bin>initdb -D "D:\programs\Postgres18\data" -U postgres -W
The files belonging to this database system will be owned by user "Cyla".
This user must also own the server process.

The database cluster will be initialized with locale "English_Philippines.1252".
The default database encoding has accordingly been set to "WIN1252".
The default text search configuration will be set to "english".

Data page checksums are enabled.

Enter new superuser password: cyla0917

Enter it again:


creating directory D:/programs/Postgres18/data ... ok
creating subdirectories ... ok
selecting dynamic shared memory implementation ... windows
selecting default "max_connections" ... 100
selecting default "shared_buffers" ... 128MB
selecting default time zone ... Asia/Shanghai
creating configuration files ... ok
running bootstrap script ... ok
performing post-bootstrap initialization ... ok
syncing data to disk ... ok

initdb: warning: enabling "trust" authentication for local connections
initdb: hint: You can change this by editing pg_hba.conf or using the option -A, or --auth-local and --auth-host, the next time you run initdb.

Success. You can now start the database server using:

    pg_ctl -D ^"D^:^\programs^\Postgres18^\data^" -l logfile start

This manually start the server 
cd D:\programs\Postgres18\bin
pg_ctl -D "D:\programs\Postgres18\data" start

Databases Table
-- ======================================
-- INCUBATEES TABLE (you already have this)
-- ======================================
CREATE TABLE incubatees (
    incubatee_id SERIAL PRIMARY KEY,
    last_name TEXT NOT NULL,
    first_name TEXT NOT NULL,
    middle_name TEXT,
    contact_info TEXT,
    batch INTEGER,
    new_field INTEGER,
    company_name TEXT,
    email VARCHAR(100),
    phone_number VARCHAR(100)
);

-- ======================================
-- USERS TABLE (customers)
-- ======================================
CREATE TABLE users (
    id_no SERIAL PRIMARY KEY,
    username VARCHAR(150) UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Function for auto-updating timestamps
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- ======================================
-- INCUBATEE PRODUCTS TABLE
-- ======================================
CREATE TABLE incubatee_products (
    product_id SERIAL PRIMARY KEY,
    incubatee_id INT NOT NULL,
    name VARCHAR(150) NOT NULL,
    stock_no VARCHAR(50) NOT NULL,
    products VARCHAR(150) NOT NULL,
    stock_amount INT NOT NULL CHECK (stock_amount >= 0),
    price_per_stocks NUMERIC(8,2) NOT NULL CHECK (price_per_stocks >= 0),
    details TEXT NOT NULL,
    category VARCHAR(100),
    expiration_date DATE,
    warranty VARCHAR(100),
    added_on DATE DEFAULT CURRENT_DATE,
    image_path VARCHAR(255),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    FOREIGN KEY (incubatee_id)
        REFERENCES incubatees(incubatee_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

CREATE TRIGGER update_incubatee_products_modtime
BEFORE UPDATE ON incubatee_products
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- ======================================
-- RESERVATIONS TABLE
-- ======================================
CREATE TABLE reservations (
    reservation_id SERIAL PRIMARY KEY,
    user_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL CHECK (quantity > 0),
    status VARCHAR(20) NOT NULL DEFAULT 'pending'
        CHECK (status IN ('pending', 'approved', 'completed', 'rejected')),
    reserved_at TIMESTAMPTZ DEFAULT NOW(),
    approved_at TIMESTAMPTZ,
    completed_at TIMESTAMPTZ,
    rejected_at TIMESTAMPTZ,
    rejected_reason TEXT,
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    FOREIGN KEY (user_id)
        REFERENCES users(id_no)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (product_id)
        REFERENCES incubatee_products(product_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

CREATE TRIGGER update_reservations_modtime
BEFORE UPDATE ON reservations
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- ======================================
-- FAVORITES TABLE
-- ======================================
CREATE TABLE favorites (
    favorite_id SERIAL PRIMARY KEY,
    user_id INT NOT NULL,
    product_id INT NOT NULL,
    added_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    FOREIGN KEY (user_id)
        REFERENCES users(id_no)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (product_id)
        REFERENCES incubatee_products(product_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    UNIQUE (user_id, product_id)
);

CREATE TRIGGER update_favorites_modtime
BEFORE UPDATE ON favorites
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- ======================================
-- OPTIONAL VIEW: RESERVATION STATUS SUMMARY
-- ======================================
CREATE OR REPLACE VIEW reservation_status_summary AS
SELECT
    user_id,
    status,
    COUNT(*) AS total_reservations
FROM reservations
GROUP BY user_id, status;


Manually start the PostgreSQL if wala sa process ka laptop insigida mag run imo database

cd C:\Program Files\PostgreSQL\18\bin  unahon mo ni enter sa Command prompt 
pg_ctl start -D "C:\Program Files\PostgreSQL\18\data" dayun ini sya para mag start ang database mo 


To fix:
limited 
hot
sale
new
best seller
add a pagination 
image, name , products, details , price, expiration if not null if null switch to warranty 
This is a sample data to be enter on incubate
Here's the updated list with categories and warranties added:

INSERT INTO incubatee_products
(incubatee_id, name, stock_no, products, stock_amount, price_per_stocks, details, category, expiration_date, warranty, added_on, image_path)
VALUES
-- ðŸŒ¿ Maria Santos (GreenLeaf Farms)
(1, 'Organic Lettuce', 'GLF-001', 'Fresh Organic Lettuce', 50, 50.00, 'Crisp, pesticide-free lettuce ideal for salads.', 'Vegetables', '2025-12-31', 'No Warranty', CURRENT_DATE, 'static/uploads/lettuce.jpg'),
(1, 'Hydroponic Basil', 'GLF-002', 'Fresh Basil Leaves', 40, 80.00, 'Hydroponically grown basil with strong aroma.', 'Herbs', '2025-11-30', 'No Warranty', CURRENT_DATE, 'static/uploads/basil.jpg'),

-- Carlos Reyes (Technology Solutions) â€” focus on tech-related products
(2, 'Smart Home Sensor', 'CTS-101', 'Wi-Fi Enabled Motion Sensor', 50, 1500.00, 'Advanced motion sensor for smart home automation.', 'Electronics', NULL, '1 year', CURRENT_DATE, 'static/uploads/smart_sensor.jpg'),
(2, 'USB-C Charging Hub', 'CTS-102', 'Multi-Port USB-C Hub', 75, 1200.00, 'Compact hub with 4 USB-C ports for fast charging and data transfer.', 'Electronics', '2026-12-31', '1 year', CURRENT_DATE, 'static/uploads/usb_c_hub.jpg'),

-- Angela Lopez (FreshNet Poultry) â€” focus on food products / farm produce
(3, 'Free-Range Chicken', 'FGO-201', 'Organic Free-Range Chicken', 40, 350.00, 'Freshly slaughtered free-range chicken from local farms.', 'Poultry', '2026-02-28', '7 days', CURRENT_DATE, 'static/uploads/free_range_chicken.jpg'),
(3, 'Duck Eggs', 'FGO-202', 'Fresh Duck Eggs', 60, 15.00, 'Organic duck eggs sourced from farm-raised ducks.', 'Eggs', '2026-03-05', '14 days', CURRENT_DATE, 'static/uploads/duck_eggs.jpg');

